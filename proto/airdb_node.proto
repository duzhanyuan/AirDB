package airdb;
option cc_generic_services = true;

enum DBNodeStatus {
    kLeader = 0;
    kCandidate = 1; 
    kFollower = 2;
    kOffline = 3;
};

enum BinLogOperation {
    kPutOp = 1;
    kGetOp = 2;
    kDeleteOp = 3;
    kLockOp = 4;
    kUnLockOp = 5;
    kNop = 6;
}

message Entry {
    required string key = 1;
    required string value = 2;
    required int64 term = 3;
    optional BinLogOperation op = 4;
};

message VoteRequest {
    required int64 term = 1;
    required string candidate_addr = 2;
    optional int64 last_log_index = 3;
    optional int64 last_log_term = 4;
};

message VoteResponse {
    required int64 term = 1;
    required bool vote_pass = 2;
};

message AppendEntriesRequest {
    required int64 term = 1;
    required string leader_id = 2;
    optional int64 prev_log_index = 3;
    optional int64 prev_log_term = 4;
    optional int64 leader_commit_index = 5;
    repeated Entry entries = 6;
};

message AppendEntriesResponse {
    required int64 current_term = 1;
    required bool success = 2;
    optional int64 log_length = 3;
    optional bool is_busy = 4 [default = false]; 
};

message ShowStatusRequest {

};

message ShowStatusResponse {
    required DBNodeStatus status = 1;
    required int64 term = 2;
    required int64 last_log_index = 3;
    required int64 last_log_term = 4;
    optional int64 commit_index = 5; 
    optional int64 last_applied = 6;
};

message PutRequest {
    required bytes key = 1;
    required bytes value = 2;
};

message PutResponse {
    required bool success = 1;
};

message GetRequest {
    required bytes key = 1;
};

message GetResponse {
    required bool hit = 1;
    required bool success = 2;
    optional bytes value = 3;
    optional string leader_id = 4;
};

message DelRequest {
    required bytes key = 1;
};

message DelResponse {
    required bool success = 1;
    optional string leader_id = 2;
};

message LockRequest {
    required bytes key = 1;
};

message LockResponse {
    required bool success = 1;
    optional string leader_id = 2;
};

message UnLockRequest {
    required bytes key = 1;
}


message UnLockResponse {
    required bool success = 1;
    optional string leader_id = 2;
}

message CleanBinlogRequest {
    required int64 end_index = 1;
};

message CleanBinlogResponse {
    required bool success = 1;
};

service AirDB {
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc Put(PutRequest) returns(PutResponse);
    rpc Get(GetRequest) returns(GetResponse);
    rpc Delete(DelRequest) returns(DelResponse);
    rpc Lock(LockRequest) returns(LockResponse);
    rpc UnLock(UnLockRequest) returns (UnLockResponse);
    rpc AppendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);
    rpc ShowStatus(ShowStatusRequest) returns(ShowStatusResponse);
    rpc CleanBinlog(CleanBinlogRequest) returns(CleanBinlogResponse);
}
